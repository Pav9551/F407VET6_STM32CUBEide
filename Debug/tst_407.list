
tst_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004340  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080044c8  080044c8  000054c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004508  08004508  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004508  08004508  00005508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004510  08004510  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004510  08004510  00005510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004514  08004514  00005514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004518  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b158  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e5a  00000000  00000000  00011194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  00012ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000699  00000000  00000000  000138a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020040  00000000  00000000  00013f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b3db  00000000  00000000  00033f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1a83  00000000  00000000  0003f354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100dd7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002388  00000000  00000000  00100e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001031a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044b0 	.word	0x080044b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080044b0 	.word	0x080044b0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_uldivmod>:
 80007a4:	b953      	cbnz	r3, 80007bc <__aeabi_uldivmod+0x18>
 80007a6:	b94a      	cbnz	r2, 80007bc <__aeabi_uldivmod+0x18>
 80007a8:	2900      	cmp	r1, #0
 80007aa:	bf08      	it	eq
 80007ac:	2800      	cmpeq	r0, #0
 80007ae:	bf1c      	itt	ne
 80007b0:	f04f 31ff 	movne.w	r1, #4294967295
 80007b4:	f04f 30ff 	movne.w	r0, #4294967295
 80007b8:	f000 b988 	b.w	8000acc <__aeabi_idiv0>
 80007bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80007c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007c4:	f000 f824 	bl	8000810 <__udivmoddi4>
 80007c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d0:	b004      	add	sp, #16
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_d2ulz>:
 80007d4:	b5d0      	push	{r4, r6, r7, lr}
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <__aeabi_d2ulz+0x34>)
 80007d8:	2200      	movs	r2, #0
 80007da:	4606      	mov	r6, r0
 80007dc:	460f      	mov	r7, r1
 80007de:	f7ff fcfb 	bl	80001d8 <__aeabi_dmul>
 80007e2:	f000 f975 	bl	8000ad0 <__aeabi_d2uiz>
 80007e6:	4604      	mov	r4, r0
 80007e8:	f7ff ff62 	bl	80006b0 <__aeabi_ui2d>
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <__aeabi_d2ulz+0x38>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f7ff fcf2 	bl	80001d8 <__aeabi_dmul>
 80007f4:	4602      	mov	r2, r0
 80007f6:	460b      	mov	r3, r1
 80007f8:	4630      	mov	r0, r6
 80007fa:	4639      	mov	r1, r7
 80007fc:	f7ff fe1a 	bl	8000434 <__aeabi_dsub>
 8000800:	f000 f966 	bl	8000ad0 <__aeabi_d2uiz>
 8000804:	4621      	mov	r1, r4
 8000806:	bdd0      	pop	{r4, r6, r7, pc}
 8000808:	3df00000 	.word	0x3df00000
 800080c:	41f00000 	.word	0x41f00000

08000810 <__udivmoddi4>:
 8000810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000814:	9d08      	ldr	r5, [sp, #32]
 8000816:	460c      	mov	r4, r1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d14e      	bne.n	80008ba <__udivmoddi4+0xaa>
 800081c:	4694      	mov	ip, r2
 800081e:	458c      	cmp	ip, r1
 8000820:	4686      	mov	lr, r0
 8000822:	fab2 f282 	clz	r2, r2
 8000826:	d962      	bls.n	80008ee <__udivmoddi4+0xde>
 8000828:	b14a      	cbz	r2, 800083e <__udivmoddi4+0x2e>
 800082a:	f1c2 0320 	rsb	r3, r2, #32
 800082e:	4091      	lsls	r1, r2
 8000830:	fa20 f303 	lsr.w	r3, r0, r3
 8000834:	fa0c fc02 	lsl.w	ip, ip, r2
 8000838:	4319      	orrs	r1, r3
 800083a:	fa00 fe02 	lsl.w	lr, r0, r2
 800083e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000842:	fa1f f68c 	uxth.w	r6, ip
 8000846:	fbb1 f4f7 	udiv	r4, r1, r7
 800084a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800084e:	fb07 1114 	mls	r1, r7, r4, r1
 8000852:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000856:	fb04 f106 	mul.w	r1, r4, r6
 800085a:	4299      	cmp	r1, r3
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x64>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f104 30ff 	add.w	r0, r4, #4294967295
 8000866:	f080 8112 	bcs.w	8000a8e <__udivmoddi4+0x27e>
 800086a:	4299      	cmp	r1, r3
 800086c:	f240 810f 	bls.w	8000a8e <__udivmoddi4+0x27e>
 8000870:	3c02      	subs	r4, #2
 8000872:	4463      	add	r3, ip
 8000874:	1a59      	subs	r1, r3, r1
 8000876:	fa1f f38e 	uxth.w	r3, lr
 800087a:	fbb1 f0f7 	udiv	r0, r1, r7
 800087e:	fb07 1110 	mls	r1, r7, r0, r1
 8000882:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000886:	fb00 f606 	mul.w	r6, r0, r6
 800088a:	429e      	cmp	r6, r3
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x94>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f100 31ff 	add.w	r1, r0, #4294967295
 8000896:	f080 80fc 	bcs.w	8000a92 <__udivmoddi4+0x282>
 800089a:	429e      	cmp	r6, r3
 800089c:	f240 80f9 	bls.w	8000a92 <__udivmoddi4+0x282>
 80008a0:	4463      	add	r3, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	1b9b      	subs	r3, r3, r6
 80008a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11d      	cbz	r5, 80008b6 <__udivmoddi4+0xa6>
 80008ae:	40d3      	lsrs	r3, r2
 80008b0:	2200      	movs	r2, #0
 80008b2:	e9c5 3200 	strd	r3, r2, [r5]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d905      	bls.n	80008ca <__udivmoddi4+0xba>
 80008be:	b10d      	cbz	r5, 80008c4 <__udivmoddi4+0xb4>
 80008c0:	e9c5 0100 	strd	r0, r1, [r5]
 80008c4:	2100      	movs	r1, #0
 80008c6:	4608      	mov	r0, r1
 80008c8:	e7f5      	b.n	80008b6 <__udivmoddi4+0xa6>
 80008ca:	fab3 f183 	clz	r1, r3
 80008ce:	2900      	cmp	r1, #0
 80008d0:	d146      	bne.n	8000960 <__udivmoddi4+0x150>
 80008d2:	42a3      	cmp	r3, r4
 80008d4:	d302      	bcc.n	80008dc <__udivmoddi4+0xcc>
 80008d6:	4290      	cmp	r0, r2
 80008d8:	f0c0 80f0 	bcc.w	8000abc <__udivmoddi4+0x2ac>
 80008dc:	1a86      	subs	r6, r0, r2
 80008de:	eb64 0303 	sbc.w	r3, r4, r3
 80008e2:	2001      	movs	r0, #1
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d0e6      	beq.n	80008b6 <__udivmoddi4+0xa6>
 80008e8:	e9c5 6300 	strd	r6, r3, [r5]
 80008ec:	e7e3      	b.n	80008b6 <__udivmoddi4+0xa6>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	f040 8090 	bne.w	8000a14 <__udivmoddi4+0x204>
 80008f4:	eba1 040c 	sub.w	r4, r1, ip
 80008f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008fc:	fa1f f78c 	uxth.w	r7, ip
 8000900:	2101      	movs	r1, #1
 8000902:	fbb4 f6f8 	udiv	r6, r4, r8
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb08 4416 	mls	r4, r8, r6, r4
 800090e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000912:	fb07 f006 	mul.w	r0, r7, r6
 8000916:	4298      	cmp	r0, r3
 8000918:	d908      	bls.n	800092c <__udivmoddi4+0x11c>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x11a>
 8000924:	4298      	cmp	r0, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2b4>
 800092a:	4626      	mov	r6, r4
 800092c:	1a1c      	subs	r4, r3, r0
 800092e:	fa1f f38e 	uxth.w	r3, lr
 8000932:	fbb4 f0f8 	udiv	r0, r4, r8
 8000936:	fb08 4410 	mls	r4, r8, r0, r4
 800093a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800093e:	fb00 f707 	mul.w	r7, r0, r7
 8000942:	429f      	cmp	r7, r3
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x148>
 8000946:	eb1c 0303 	adds.w	r3, ip, r3
 800094a:	f100 34ff 	add.w	r4, r0, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x146>
 8000950:	429f      	cmp	r7, r3
 8000952:	f200 80b0 	bhi.w	8000ab6 <__udivmoddi4+0x2a6>
 8000956:	4620      	mov	r0, r4
 8000958:	1bdb      	subs	r3, r3, r7
 800095a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095e:	e7a5      	b.n	80008ac <__udivmoddi4+0x9c>
 8000960:	f1c1 0620 	rsb	r6, r1, #32
 8000964:	408b      	lsls	r3, r1
 8000966:	fa22 f706 	lsr.w	r7, r2, r6
 800096a:	431f      	orrs	r7, r3
 800096c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000970:	fa04 f301 	lsl.w	r3, r4, r1
 8000974:	ea43 030c 	orr.w	r3, r3, ip
 8000978:	40f4      	lsrs	r4, r6
 800097a:	fa00 f801 	lsl.w	r8, r0, r1
 800097e:	0c38      	lsrs	r0, r7, #16
 8000980:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000984:	fbb4 fef0 	udiv	lr, r4, r0
 8000988:	fa1f fc87 	uxth.w	ip, r7
 800098c:	fb00 441e 	mls	r4, r0, lr, r4
 8000990:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000994:	fb0e f90c 	mul.w	r9, lr, ip
 8000998:	45a1      	cmp	r9, r4
 800099a:	fa02 f201 	lsl.w	r2, r2, r1
 800099e:	d90a      	bls.n	80009b6 <__udivmoddi4+0x1a6>
 80009a0:	193c      	adds	r4, r7, r4
 80009a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009a6:	f080 8084 	bcs.w	8000ab2 <__udivmoddi4+0x2a2>
 80009aa:	45a1      	cmp	r9, r4
 80009ac:	f240 8081 	bls.w	8000ab2 <__udivmoddi4+0x2a2>
 80009b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80009b4:	443c      	add	r4, r7
 80009b6:	eba4 0409 	sub.w	r4, r4, r9
 80009ba:	fa1f f983 	uxth.w	r9, r3
 80009be:	fbb4 f3f0 	udiv	r3, r4, r0
 80009c2:	fb00 4413 	mls	r4, r0, r3, r4
 80009c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ce:	45a4      	cmp	ip, r4
 80009d0:	d907      	bls.n	80009e2 <__udivmoddi4+0x1d2>
 80009d2:	193c      	adds	r4, r7, r4
 80009d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80009d8:	d267      	bcs.n	8000aaa <__udivmoddi4+0x29a>
 80009da:	45a4      	cmp	ip, r4
 80009dc:	d965      	bls.n	8000aaa <__udivmoddi4+0x29a>
 80009de:	3b02      	subs	r3, #2
 80009e0:	443c      	add	r4, r7
 80009e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009e6:	fba0 9302 	umull	r9, r3, r0, r2
 80009ea:	eba4 040c 	sub.w	r4, r4, ip
 80009ee:	429c      	cmp	r4, r3
 80009f0:	46ce      	mov	lr, r9
 80009f2:	469c      	mov	ip, r3
 80009f4:	d351      	bcc.n	8000a9a <__udivmoddi4+0x28a>
 80009f6:	d04e      	beq.n	8000a96 <__udivmoddi4+0x286>
 80009f8:	b155      	cbz	r5, 8000a10 <__udivmoddi4+0x200>
 80009fa:	ebb8 030e 	subs.w	r3, r8, lr
 80009fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000a02:	fa04 f606 	lsl.w	r6, r4, r6
 8000a06:	40cb      	lsrs	r3, r1
 8000a08:	431e      	orrs	r6, r3
 8000a0a:	40cc      	lsrs	r4, r1
 8000a0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000a10:	2100      	movs	r1, #0
 8000a12:	e750      	b.n	80008b6 <__udivmoddi4+0xa6>
 8000a14:	f1c2 0320 	rsb	r3, r2, #32
 8000a18:	fa20 f103 	lsr.w	r1, r0, r3
 8000a1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a20:	fa24 f303 	lsr.w	r3, r4, r3
 8000a24:	4094      	lsls	r4, r2
 8000a26:	430c      	orrs	r4, r1
 8000a28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a30:	fa1f f78c 	uxth.w	r7, ip
 8000a34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a38:	fb08 3110 	mls	r1, r8, r0, r3
 8000a3c:	0c23      	lsrs	r3, r4, #16
 8000a3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a42:	fb00 f107 	mul.w	r1, r0, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d908      	bls.n	8000a5c <__udivmoddi4+0x24c>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a52:	d22c      	bcs.n	8000aae <__udivmoddi4+0x29e>
 8000a54:	4299      	cmp	r1, r3
 8000a56:	d92a      	bls.n	8000aae <__udivmoddi4+0x29e>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	4463      	add	r3, ip
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a64:	fb08 3311 	mls	r3, r8, r1, r3
 8000a68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a6c:	fb01 f307 	mul.w	r3, r1, r7
 8000a70:	42a3      	cmp	r3, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x276>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a7c:	d213      	bcs.n	8000aa6 <__udivmoddi4+0x296>
 8000a7e:	42a3      	cmp	r3, r4
 8000a80:	d911      	bls.n	8000aa6 <__udivmoddi4+0x296>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	1ae4      	subs	r4, r4, r3
 8000a88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a8c:	e739      	b.n	8000902 <__udivmoddi4+0xf2>
 8000a8e:	4604      	mov	r4, r0
 8000a90:	e6f0      	b.n	8000874 <__udivmoddi4+0x64>
 8000a92:	4608      	mov	r0, r1
 8000a94:	e706      	b.n	80008a4 <__udivmoddi4+0x94>
 8000a96:	45c8      	cmp	r8, r9
 8000a98:	d2ae      	bcs.n	80009f8 <__udivmoddi4+0x1e8>
 8000a9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000aa2:	3801      	subs	r0, #1
 8000aa4:	e7a8      	b.n	80009f8 <__udivmoddi4+0x1e8>
 8000aa6:	4631      	mov	r1, r6
 8000aa8:	e7ed      	b.n	8000a86 <__udivmoddi4+0x276>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	e799      	b.n	80009e2 <__udivmoddi4+0x1d2>
 8000aae:	4630      	mov	r0, r6
 8000ab0:	e7d4      	b.n	8000a5c <__udivmoddi4+0x24c>
 8000ab2:	46d6      	mov	lr, sl
 8000ab4:	e77f      	b.n	80009b6 <__udivmoddi4+0x1a6>
 8000ab6:	4463      	add	r3, ip
 8000ab8:	3802      	subs	r0, #2
 8000aba:	e74d      	b.n	8000958 <__udivmoddi4+0x148>
 8000abc:	4606      	mov	r6, r0
 8000abe:	4623      	mov	r3, r4
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e70f      	b.n	80008e4 <__udivmoddi4+0xd4>
 8000ac4:	3e02      	subs	r6, #2
 8000ac6:	4463      	add	r3, ip
 8000ac8:	e730      	b.n	800092c <__udivmoddi4+0x11c>
 8000aca:	bf00      	nop

08000acc <__aeabi_idiv0>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_d2uiz>:
 8000ad0:	004a      	lsls	r2, r1, #1
 8000ad2:	d211      	bcs.n	8000af8 <__aeabi_d2uiz+0x28>
 8000ad4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ad8:	d211      	bcs.n	8000afe <__aeabi_d2uiz+0x2e>
 8000ada:	d50d      	bpl.n	8000af8 <__aeabi_d2uiz+0x28>
 8000adc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae4:	d40e      	bmi.n	8000b04 <__aeabi_d2uiz+0x34>
 8000ae6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_d2uiz+0x3a>
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0000 	mov.w	r0, #0
 8000b0e:	4770      	bx	lr

08000b10 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b094      	sub	sp, #80	@ 0x50
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b16:	4b41      	ldr	r3, [pc, #260]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b18:	4a41      	ldr	r2, [pc, #260]	@ (8000c20 <MX_CAN1_Init+0x110>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000b1c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b1e:	2208      	movs	r2, #8
 8000b20:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b22:	4b3e      	ldr	r3, [pc, #248]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b28:	4b3c      	ldr	r3, [pc, #240]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b30:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000b34:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b36:	4b39      	ldr	r3, [pc, #228]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b3c:	4b37      	ldr	r3, [pc, #220]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b42:	4b36      	ldr	r3, [pc, #216]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b48:	4b34      	ldr	r3, [pc, #208]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b4e:	4b33      	ldr	r3, [pc, #204]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b54:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b5a:	4b30      	ldr	r3, [pc, #192]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b60:	482e      	ldr	r0, [pc, #184]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000b62:	f000 fe4d 	bl	8001800 <HAL_CAN_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b6c:	f000 fc84 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* CAN filter configuration */
  CAN_FilterTypeDef canFilterConfig;
    canFilterConfig.FilterBank = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	643b      	str	r3, [r7, #64]	@ 0x40
    canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	647b      	str	r3, [r7, #68]	@ 0x44
    canFilterConfig.FilterIdHigh = 0x0000;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    canFilterConfig.FilterIdLow = 0x0000;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    canFilterConfig.FilterMaskIdHigh = 0x0000;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
    canFilterConfig.FilterMaskIdLow = 0x0000;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
    canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //<------вот это важно
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    canFilterConfig.FilterActivation = ENABLE;
 8000b90:	2301      	movs	r3, #1
 8000b92:	64bb      	str	r3, [r7, #72]	@ 0x48
    canFilterConfig.SlaveStartFilterBank = 0; //<-------и вот это
 8000b94:	2300      	movs	r3, #0
 8000b96:	64fb      	str	r3, [r7, #76]	@ 0x4c

      if (HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig) != HAL_OK)
 8000b98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	481f      	ldr	r0, [pc, #124]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000ba0:	f000 ff2a 	bl	80019f8 <HAL_CAN_ConfigFilter>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_CAN1_Init+0x9e>
      {
          // Filter configuration Error
          Error_Handler();
 8000baa:	f000 fc65 	bl	8001478 <Error_Handler>
      }

      /* Start the CAN peripheral */
      if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000bae:	481b      	ldr	r0, [pc, #108]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000bb0:	f001 f802 	bl	8001bb8 <HAL_CAN_Start>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_CAN1_Init+0xae>
      {
          // Start Error
          Error_Handler();
 8000bba:	f000 fc5d 	bl	8001478 <Error_Handler>
      }

      /* Activate CAN notifications */
      if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4816      	ldr	r0, [pc, #88]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000bc2:	f001 fa2f 	bl	8002024 <HAL_CAN_ActivateNotification>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_CAN1_Init+0xc0>
      {
          // Notification Error
          Error_Handler();
 8000bcc:	f000 fc54 	bl	8001478 <Error_Handler>
      }

      /* Transmission */
      CAN_TxHeaderTypeDef TxHeader;
      uint32_t TxMailbox;
      uint8_t TxData[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};  // Example data
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <MX_CAN1_Init+0x114>)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bd8:	e883 0003 	stmia.w	r3, {r0, r1}

      TxHeader.DLC = 8;  // Data length
 8000bdc:	2308      	movs	r3, #8
 8000bde:	623b      	str	r3, [r7, #32]
      TxHeader.IDE = CAN_ID_STD;  // Using standard identifier
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
      TxHeader.StdId = 0x423;  // Standard identifier of the message
 8000be4:	f240 4323 	movw	r3, #1059	@ 0x423
 8000be8:	613b      	str	r3, [r7, #16]
      TxHeader.RTR = CAN_RTR_DATA;  // Message is a data frame
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]

      if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	1d3a      	adds	r2, r7, #4
 8000bf4:	f107 0110 	add.w	r1, r7, #16
 8000bf8:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000bfa:	f001 f821 	bl	8001c40 <HAL_CAN_AddTxMessage>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_CAN1_Init+0xf8>
      {
          // Transmission request Error
          Error_Handler();
 8000c04:	f000 fc38 	bl	8001478 <Error_Handler>
      }
      //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
      HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE);
 8000c08:	f648 4102 	movw	r1, #35842	@ 0x8c02
 8000c0c:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <MX_CAN1_Init+0x10c>)
 8000c0e:	f001 fa09 	bl	8002024 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3750      	adds	r7, #80	@ 0x50
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000028 	.word	0x20000028
 8000c20:	40006400 	.word	0x40006400
 8000c24:	080044c8 	.word	0x080044c8

08000c28 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	@ 0x50
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c2e:	4b41      	ldr	r3, [pc, #260]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c30:	4a41      	ldr	r2, [pc, #260]	@ (8000d38 <MX_CAN2_Init+0x110>)
 8000c32:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000c34:	4b3f      	ldr	r3, [pc, #252]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c36:	2210      	movs	r2, #16
 8000c38:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c40:	4b3c      	ldr	r3, [pc, #240]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000c46:	4b3b      	ldr	r3, [pc, #236]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c48:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000c4c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c4e:	4b39      	ldr	r3, [pc, #228]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000c54:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c56:	4b37      	ldr	r3, [pc, #220]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c5c:	4b35      	ldr	r3, [pc, #212]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c62:	4b34      	ldr	r3, [pc, #208]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000c68:	4b32      	ldr	r3, [pc, #200]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c6e:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c74:	4b2f      	ldr	r3, [pc, #188]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c7a:	482e      	ldr	r0, [pc, #184]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000c7c:	f000 fdc0 	bl	8001800 <HAL_CAN_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000c86:	f000 fbf7 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  /* CAN filter configuration for CAN2 */
  CAN_FilterTypeDef canFilterConfig;
    canFilterConfig.FilterBank = 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	643b      	str	r3, [r7, #64]	@ 0x40
    canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c92:	2301      	movs	r3, #1
 8000c94:	647b      	str	r3, [r7, #68]	@ 0x44
    canFilterConfig.FilterIdHigh = 0x0000;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    canFilterConfig.FilterIdLow = 0x0000;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    canFilterConfig.FilterMaskIdHigh = 0x0000;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
    canFilterConfig.FilterMaskIdLow = 0x0000;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
    canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;//<-------а здесь вот так
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
    canFilterConfig.FilterActivation = ENABLE;
 8000caa:	2301      	movs	r3, #1
 8000cac:	64bb      	str	r3, [r7, #72]	@ 0x48
    canFilterConfig.SlaveStartFilterBank = 1; //<-------и вот так
 8000cae:	2301      	movs	r3, #1
 8000cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c

      if (HAL_CAN_ConfigFilter(&hcan2, &canFilterConfig) != HAL_OK)
 8000cb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481e      	ldr	r0, [pc, #120]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000cba:	f000 fe9d 	bl	80019f8 <HAL_CAN_ConfigFilter>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_CAN2_Init+0xa0>
      {
          // Filter configuration Error
          Error_Handler();
 8000cc4:	f000 fbd8 	bl	8001478 <Error_Handler>
      }

      /* Start the CAN peripheral */
      if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8000cc8:	481a      	ldr	r0, [pc, #104]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000cca:	f000 ff75 	bl	8001bb8 <HAL_CAN_Start>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_CAN2_Init+0xb0>
      {
          // Start Error
          Error_Handler();
 8000cd4:	f000 fbd0 	bl	8001478 <Error_Handler>
      }

      /* Activate CAN notifications */
      if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4816      	ldr	r0, [pc, #88]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000cdc:	f001 f9a2 	bl	8002024 <HAL_CAN_ActivateNotification>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_CAN2_Init+0xc2>
      {
          // Notification Error
          Error_Handler();
 8000ce6:	f000 fbc7 	bl	8001478 <Error_Handler>
      }

      /* Transmission via CAN2 */
      CAN_TxHeaderTypeDef TxHeader;
      uint32_t TxMailbox;
      uint8_t TxData[8] = {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10}; // Example data for CAN2
 8000cea:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <MX_CAN2_Init+0x114>)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf2:	e883 0003 	stmia.w	r3, {r0, r1}

      TxHeader.DLC = 8; // Data length
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	623b      	str	r3, [r7, #32]
      TxHeader.IDE = CAN_ID_EXT; // Using standard identifier
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
      TxHeader.ExtId = 0x524; // Standard identifier of the message for CAN2
 8000cfe:	f240 5324 	movw	r3, #1316	@ 0x524
 8000d02:	617b      	str	r3, [r7, #20]
      TxHeader.RTR = CAN_RTR_DATA; // Message is a data frame
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]

      if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	1d3a      	adds	r2, r7, #4
 8000d0e:	f107 0110 	add.w	r1, r7, #16
 8000d12:	4808      	ldr	r0, [pc, #32]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000d14:	f000 ff94 	bl	8001c40 <HAL_CAN_AddTxMessage>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_CAN2_Init+0xfa>
      {
          // Transmission request Error
          Error_Handler();
 8000d1e:	f000 fbab 	bl	8001478 <Error_Handler>
      }
      HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE);
 8000d22:	f648 4110 	movw	r1, #35856	@ 0x8c10
 8000d26:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <MX_CAN2_Init+0x10c>)
 8000d28:	f001 f97c 	bl	8002024 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN2_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3750      	adds	r7, #80	@ 0x50
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000050 	.word	0x20000050
 8000d38:	40006800 	.word	0x40006800
 8000d3c:	080044d0 	.word	0x080044d0

08000d40 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	@ 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a52      	ldr	r2, [pc, #328]	@ (8000ea8 <HAL_CAN_MspInit+0x168>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d145      	bne.n	8000dee <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d62:	4b52      	ldr	r3, [pc, #328]	@ (8000eac <HAL_CAN_MspInit+0x16c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a50      	ldr	r2, [pc, #320]	@ (8000eac <HAL_CAN_MspInit+0x16c>)
 8000d6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000eac <HAL_CAN_MspInit+0x16c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d10d      	bne.n	8000d90 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000d7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d84:	4b4a      	ldr	r3, [pc, #296]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d8c:	61bb      	str	r3, [r7, #24]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	4b46      	ldr	r3, [pc, #280]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d98:	4a45      	ldr	r2, [pc, #276]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da0:	4b43      	ldr	r3, [pc, #268]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dac:	2303      	movs	r3, #3
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dbc:	2309      	movs	r3, #9
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	483b      	ldr	r0, [pc, #236]	@ (8000eb4 <HAL_CAN_MspInit+0x174>)
 8000dc8:	f001 fd1c 	bl	8002804 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2014      	movs	r0, #20
 8000dd2:	f001 fc4e 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dd6:	2014      	movs	r0, #20
 8000dd8:	f001 fc67 	bl	80026aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2016      	movs	r0, #22
 8000de2:	f001 fc46 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000de6:	2016      	movs	r0, #22
 8000de8:	f001 fc5f 	bl	80026aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000dec:	e057      	b.n	8000e9e <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a31      	ldr	r2, [pc, #196]	@ (8000eb8 <HAL_CAN_MspInit+0x178>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d152      	bne.n	8000e9e <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	4a2b      	ldr	r2, [pc, #172]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000e02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e08:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e14:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <HAL_CAN_MspInit+0x16c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a24      	ldr	r2, [pc, #144]	@ (8000eac <HAL_CAN_MspInit+0x16c>)
 8000e1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <HAL_CAN_MspInit+0x16c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10d      	bne.n	8000e42 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	4a20      	ldr	r2, [pc, #128]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000e30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e36:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a19      	ldr	r2, [pc, #100]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <HAL_CAN_MspInit+0x170>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e5e:	2360      	movs	r3, #96	@ 0x60
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e6e:	2309      	movs	r3, #9
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4810      	ldr	r0, [pc, #64]	@ (8000ebc <HAL_CAN_MspInit+0x17c>)
 8000e7a:	f001 fcc3 	bl	8002804 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2041      	movs	r0, #65	@ 0x41
 8000e84:	f001 fbf5 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000e88:	2041      	movs	r0, #65	@ 0x41
 8000e8a:	f001 fc0e 	bl	80026aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2042      	movs	r0, #66	@ 0x42
 8000e94:	f001 fbed 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8000e98:	2042      	movs	r0, #66	@ 0x42
 8000e9a:	f001 fc06 	bl	80026aa <HAL_NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3730      	adds	r7, #48	@ 0x30
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40006400 	.word	0x40006400
 8000eac:	20000078 	.word	0x20000078
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	40006800 	.word	0x40006800
 8000ebc:	40020400 	.word	0x40020400

08000ec0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b2e      	ldr	r3, [pc, #184]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a2d      	ldr	r2, [pc, #180]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0310 	and.w	r3, r3, #16
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a11      	ldr	r2, [pc, #68]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000f68:	480b      	ldr	r0, [pc, #44]	@ (8000f98 <MX_GPIO_Init+0xd8>)
 8000f6a:	f001 fde7 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000f6e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <MX_GPIO_Init+0xd8>)
 8000f88:	f001 fc3c 	bl	8002804 <HAL_GPIO_Init>

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	@ 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40021000 	.word	0x40021000

08000f9c <CAN1_CAN2_broadcast>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CAN1_CAN2_broadcast(uint32_t can_id, uint8_t* x, uint8_t length) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	@ 0x38
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	71fb      	strb	r3, [r7, #7]
    uint32_t TxMailbox;
    uint8_t TxData[8];

    // Преобразование входящего сообщения от системы управления
    // id = 0x150 широковещательный запуск/остановка
    if (can_id == 0x150) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8000fb0:	d13e      	bne.n	8001030 <CAN1_CAN2_broadcast+0x94>
        TxHeader.DLC = 8;
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
        TxHeader.IDE = CAN_ID_EXT;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
        TxHeader.ExtId = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
        TxHeader.RTR = CAN_RTR_DATA;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (x[0] == 0x01) {
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d110      	bne.n	8000fec <CAN1_CAN2_broadcast+0x50>
            TxData[0] = 0b00010000;
 8000fca:	2310      	movs	r3, #16
 8000fcc:	753b      	strb	r3, [r7, #20]
            TxData[1] = 0x04;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	757b      	strb	r3, [r7, #21]
            TxData[2] = 0x00;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75bb      	strb	r3, [r7, #22]
            TxData[3] = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]
            TxData[4] = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	763b      	strb	r3, [r7, #24]
            TxData[5] = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	767b      	strb	r3, [r7, #25]
            TxData[6] = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	76bb      	strb	r3, [r7, #26]
            TxData[7] = 0x00;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	76fb      	strb	r3, [r7, #27]
 8000fea:	e013      	b.n	8001014 <CAN1_CAN2_broadcast+0x78>
        } else if (x[0] == 0x00) {
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10f      	bne.n	8001014 <CAN1_CAN2_broadcast+0x78>
            TxData[0] = 0b00010000;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	753b      	strb	r3, [r7, #20]
            TxData[1] = 0x04;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	757b      	strb	r3, [r7, #21]
            TxData[2] = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	75bb      	strb	r3, [r7, #22]
            TxData[3] = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	75fb      	strb	r3, [r7, #23]
            TxData[4] = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	763b      	strb	r3, [r7, #24]
            TxData[5] = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	767b      	strb	r3, [r7, #25]
            TxData[6] = 0x00;
 800100c:	2300      	movs	r3, #0
 800100e:	76bb      	strb	r3, [r7, #26]
            TxData[7] = 0x01;
 8001010:	2301      	movs	r3, #1
 8001012:	76fb      	strb	r3, [r7, #27]
        }

        if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	f107 0214 	add.w	r2, r7, #20
 800101c:	f107 0120 	add.w	r1, r7, #32
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <CAN1_CAN2_broadcast+0x9c>)
 8001022:	f000 fe0d 	bl	8001c40 <HAL_CAN_AddTxMessage>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <CAN1_CAN2_broadcast+0x94>
            Error_Handler();
 800102c:	f000 fa24 	bl	8001478 <Error_Handler>
        }

    }


}
 8001030:	bf00      	nop
 8001032:	3738      	adds	r7, #56	@ 0x38
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000050 	.word	0x20000050

0800103c <CAN1_CAN2_individ>:
void CAN1_CAN2_individ(uint32_t can_id, uint8_t* x, uint8_t length) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	@ 0x38
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	4613      	mov	r3, r2
 8001048:	71fb      	strb	r3, [r7, #7]
    uint8_t TxData[8];

    // Преобразование входящего сообщения от системы управления
     // id = 0x160 + адрес: индивидуальный запуск/остановка
     //if (can_id >= 0x160 && can_id <= 0x18F) {
    if ((can_id >= 0x160) & (can_id <= 0x18F)) {//не работает с &&
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f240 125f 	movw	r2, #351	@ 0x15f
 8001050:	4293      	cmp	r3, r2
 8001052:	bf8c      	ite	hi
 8001054:	2301      	movhi	r3, #1
 8001056:	2300      	movls	r3, #0
 8001058:	b2da      	uxtb	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f240 118f 	movw	r1, #399	@ 0x18f
 8001060:	428b      	cmp	r3, r1
 8001062:	bf94      	ite	ls
 8001064:	2301      	movls	r3, #1
 8001066:	2300      	movhi	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4013      	ands	r3, r2
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d040      	beq.n	80010f4 <CAN1_CAN2_individ+0xb8>
         TxHeader.DLC = 8;
 8001072:	2308      	movs	r3, #8
 8001074:	633b      	str	r3, [r7, #48]	@ 0x30
         TxHeader.IDE = CAN_ID_EXT;
 8001076:	2304      	movs	r3, #4
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
         TxHeader.ExtId = can_id - 0x160 + 1;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f2a3 135f 	subw	r3, r3, #351	@ 0x15f
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
         TxHeader.RTR = CAN_RTR_DATA;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c

         if (x[0] == 0x01) {
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d110      	bne.n	80010b0 <CAN1_CAN2_individ+0x74>
             TxData[0] = 0b00010000;
 800108e:	2310      	movs	r3, #16
 8001090:	753b      	strb	r3, [r7, #20]
             TxData[1] = 0x04;
 8001092:	2304      	movs	r3, #4
 8001094:	757b      	strb	r3, [r7, #21]
             TxData[2] = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	75bb      	strb	r3, [r7, #22]
             TxData[3] = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	75fb      	strb	r3, [r7, #23]
             TxData[4] = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	763b      	strb	r3, [r7, #24]
             TxData[5] = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	767b      	strb	r3, [r7, #25]
             TxData[6] = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	76bb      	strb	r3, [r7, #26]
             TxData[7] = 0x00;
 80010aa:	2300      	movs	r3, #0
 80010ac:	76fb      	strb	r3, [r7, #27]
 80010ae:	e013      	b.n	80010d8 <CAN1_CAN2_individ+0x9c>
         } else if (x[0] == 0x00) {
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10f      	bne.n	80010d8 <CAN1_CAN2_individ+0x9c>
             TxData[0] = 0b00010000;
 80010b8:	2310      	movs	r3, #16
 80010ba:	753b      	strb	r3, [r7, #20]
             TxData[1] = 0x04;
 80010bc:	2304      	movs	r3, #4
 80010be:	757b      	strb	r3, [r7, #21]
             TxData[2] = 0x00;
 80010c0:	2300      	movs	r3, #0
 80010c2:	75bb      	strb	r3, [r7, #22]
             TxData[3] = 0x00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	75fb      	strb	r3, [r7, #23]
             TxData[4] = 0x00;
 80010c8:	2300      	movs	r3, #0
 80010ca:	763b      	strb	r3, [r7, #24]
             TxData[5] = 0x00;
 80010cc:	2300      	movs	r3, #0
 80010ce:	767b      	strb	r3, [r7, #25]
             TxData[6] = 0x00;
 80010d0:	2300      	movs	r3, #0
 80010d2:	76bb      	strb	r3, [r7, #26]
             TxData[7] = 0x01;
 80010d4:	2301      	movs	r3, #1
 80010d6:	76fb      	strb	r3, [r7, #27]
         }

         if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	f107 0214 	add.w	r2, r7, #20
 80010e0:	f107 0120 	add.w	r1, r7, #32
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <CAN1_CAN2_individ+0xc0>)
 80010e6:	f000 fdab 	bl	8001c40 <HAL_CAN_AddTxMessage>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <CAN1_CAN2_individ+0xb8>
             Error_Handler();
 80010f0:	f000 f9c2 	bl	8001478 <Error_Handler>
         }
    }
}
 80010f4:	bf00      	nop
 80010f6:	3738      	adds	r7, #56	@ 0x38
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000050 	.word	0x20000050

08001100 <CAN1_CAN2_current>:

void CAN1_CAN2_current(uint32_t can_id, uint8_t* x, uint8_t length) {
 8001100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001104:	b092      	sub	sp, #72	@ 0x48
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	4613      	mov	r3, r2
 800110e:	71fb      	strb	r3, [r7, #7]
    uint8_t TxData[8];

    // Преобразование входящего сообщения от системы управления
     // id = 0x160 + адрес: индивидуальный запуск/остановка
     //if (can_id >= 0x160 && can_id <= 0x18F) {
    if ((can_id >= 0x160) & (can_id <= 0x18F)) {//не работает с &&
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f240 125f 	movw	r2, #351	@ 0x15f
 8001116:	4293      	cmp	r3, r2
 8001118:	bf8c      	ite	hi
 800111a:	2301      	movhi	r3, #1
 800111c:	2300      	movls	r3, #0
 800111e:	b2da      	uxtb	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f240 118f 	movw	r1, #399	@ 0x18f
 8001126:	428b      	cmp	r3, r1
 8001128:	bf94      	ite	ls
 800112a:	2301      	movls	r3, #1
 800112c:	2300      	movhi	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4013      	ands	r3, r2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80a5 	beq.w	8001284 <CAN1_CAN2_current+0x184>
         TxHeader.DLC = 8;
 800113a:	2308      	movs	r3, #8
 800113c:	62fb      	str	r3, [r7, #44]	@ 0x2c
         TxHeader.IDE = CAN_ID_EXT;
 800113e:	2304      	movs	r3, #4
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
         TxHeader.ExtId = can_id - 0x160 + 1;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f2a3 135f 	subw	r3, r3, #351	@ 0x15f
 8001148:	623b      	str	r3, [r7, #32]
         TxHeader.RTR = CAN_RTR_DATA;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28

         // Преобразование входящего сообщения от системы управления
         // Выставка значения тока, мА
         uint64_t I = (uint64_t)((x[2] << 8) | x[1]);// только грубо
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	3302      	adds	r3, #2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	3201      	adds	r2, #1
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	4313      	orrs	r3, r2
 800115e:	17da      	asrs	r2, r3, #31
 8001160:	469a      	mov	sl, r3
 8001162:	4693      	mov	fp, r2
 8001164:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
         uint64_t I_ma = I * 1000 * 0.0146628;//15A - 1023 - FF 03
 8001168:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	f04f 0a00 	mov.w	sl, #0
 8001174:	f04f 0b00 	mov.w	fp, #0
 8001178:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800117c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001180:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001184:	4652      	mov	r2, sl
 8001186:	465b      	mov	r3, fp
 8001188:	1a14      	subs	r4, r2, r0
 800118a:	eb63 0501 	sbc.w	r5, r3, r1
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	00ab      	lsls	r3, r5, #2
 8001198:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800119c:	00a2      	lsls	r2, r4, #2
 800119e:	4614      	mov	r4, r2
 80011a0:	461d      	mov	r5, r3
 80011a2:	eb14 0800 	adds.w	r8, r4, r0
 80011a6:	eb45 0901 	adc.w	r9, r5, r1
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011be:	4690      	mov	r8, r2
 80011c0:	4699      	mov	r9, r3
 80011c2:	4642      	mov	r2, r8
 80011c4:	464b      	mov	r3, r9
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fab5 	bl	8000738 <__aeabi_ul2d>
 80011ce:	a331      	add	r3, pc, #196	@ (adr r3, 8001294 <CAN1_CAN2_current+0x194>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff f800 	bl	80001d8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff faf8 	bl	80007d4 <__aeabi_d2ulz>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
         unsigned char byte1 = (I_ma >> 24) & 0xFF;
 80011ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	0e02      	lsrs	r2, r0, #24
 80011fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011fe:	0e0b      	lsrs	r3, r1, #24
 8001200:	4613      	mov	r3, r2
 8001202:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
         unsigned char byte2 = (I_ma >> 16) & 0xFF;
 8001206:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	0c02      	lsrs	r2, r0, #16
 8001214:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001218:	0c0b      	lsrs	r3, r1, #16
 800121a:	4613      	mov	r3, r2
 800121c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
         unsigned char byte3 = (I_ma >> 8) & 0xFF;
 8001220:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	0a02      	lsrs	r2, r0, #8
 800122e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001232:	0a0b      	lsrs	r3, r1, #8
 8001234:	4613      	mov	r3, r2
 8001236:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
         unsigned char byte4 =  I_ma & 0xFF;
 800123a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800123c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

         TxData[0] = 0x10;
 8001240:	2310      	movs	r3, #16
 8001242:	743b      	strb	r3, [r7, #16]
         TxData[1] = 0x03;
 8001244:	2303      	movs	r3, #3
 8001246:	747b      	strb	r3, [r7, #17]
         TxData[2] = 0x00;
 8001248:	2300      	movs	r3, #0
 800124a:	74bb      	strb	r3, [r7, #18]
         TxData[3] = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	74fb      	strb	r3, [r7, #19]

         TxData[4] = byte1;
 8001250:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001254:	753b      	strb	r3, [r7, #20]
         TxData[5] = byte2;
 8001256:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800125a:	757b      	strb	r3, [r7, #21]
         TxData[6] = byte3;
 800125c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001260:	75bb      	strb	r3, [r7, #22]
         TxData[7] = byte4;
 8001262:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001266:	75fb      	strb	r3, [r7, #23]

         if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	f107 0210 	add.w	r2, r7, #16
 8001270:	f107 011c 	add.w	r1, r7, #28
 8001274:	4806      	ldr	r0, [pc, #24]	@ (8001290 <CAN1_CAN2_current+0x190>)
 8001276:	f000 fce3 	bl	8001c40 <HAL_CAN_AddTxMessage>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <CAN1_CAN2_current+0x184>
             Error_Handler();
 8001280:	f000 f8fa 	bl	8001478 <Error_Handler>
         }
    }
}
 8001284:	bf00      	nop
 8001286:	3748      	adds	r7, #72	@ 0x48
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800128e:	bf00      	nop
 8001290:	20000050 	.word	0x20000050
 8001294:	b3be080e 	.word	0xb3be080e
 8001298:	3f8e0787 	.word	0x3f8e0787

0800129c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	@ 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};  // Example data
 80012a4:	4a19      	ldr	r2, [pc, #100]	@ (800130c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ae:	e883 0003 	stmia.w	r3, {r0, r1}
    if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	f107 0214 	add.w	r2, r7, #20
 80012ba:	2100      	movs	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fd8f 	bl	8001de0 <HAL_CAN_GetRxMessage>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d11c      	bne.n	8001302 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
    {
         HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 80012c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012cc:	4810      	ldr	r0, [pc, #64]	@ (8001310 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80012ce:	f001 fc4e 	bl	8002b6e <HAL_GPIO_TogglePin>
         CAN1_CAN2_broadcast(RxHeader.StdId, RxData, RxHeader.DLC);// StdId = 0x150
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	f107 010c 	add.w	r1, r7, #12
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe5d 	bl	8000f9c <CAN1_CAN2_broadcast>
         CAN1_CAN2_individ(RxHeader.StdId, RxData, RxHeader.DLC);// (can_id >= 0x160 && can_id <= 0x18F)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	f107 010c 	add.w	r1, r7, #12
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fea5 	bl	800103c <CAN1_CAN2_individ>
         CAN1_CAN2_current(RxHeader.StdId, RxData, RxHeader.DLC);// (can_id >= 0x160 && can_id <= 0x18F)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	f107 010c 	add.w	r1, r7, #12
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff feff 	bl	8001100 <CAN1_CAN2_current>
    }
}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	@ 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	080044d8 	.word	0x080044d8
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	@ 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};  // Example data
 800131c:	4a0d      	ldr	r2, [pc, #52]	@ (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001326:	e883 0003 	stmia.w	r3, {r0, r1}
    if(HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK)
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	f107 0214 	add.w	r2, r7, #20
 8001332:	2101      	movs	r1, #1
 8001334:	4808      	ldr	r0, [pc, #32]	@ (8001358 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 8001336:	f000 fd53 	bl	8001de0 <HAL_CAN_GetRxMessage>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d104      	bne.n	800134a <HAL_CAN_RxFifo1MsgPendingCallback+0x36>
    {
        HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
 8001340:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8001346:	f001 fc12 	bl	8002b6e <HAL_GPIO_TogglePin>
    }
}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	@ 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	080044d8 	.word	0x080044d8
 8001358:	20000050 	.word	0x20000050
 800135c:	40021000 	.word	0x40021000

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001366:	f000 f9d9 	bl	800171c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136a:	f000 f81b 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136e:	f7ff fda7 	bl	8000ec0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001372:	f7ff fbcd 	bl	8000b10 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001376:	f7ff fc57 	bl	8000c28 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 800137a:	f000 f92b 	bl	80015d4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  const char *message = "Hello, UART!\n";
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <main+0x3c>)
 8001380:	607b      	str	r3, [r7, #4]

  // Отправка сообщения через UART3
  HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7fe ff20 	bl	80001c8 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <main+0x40>)
 8001394:	f002 f8ae 	bl	80034f4 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <main+0x38>
 800139c:	080044e0 	.word	0x080044e0
 80013a0:	2000007c 	.word	0x2000007c

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b094      	sub	sp, #80	@ 0x50
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2230      	movs	r2, #48	@ 0x30
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 f850 	bl	8004458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b28      	ldr	r3, [pc, #160]	@ (8001470 <SystemClock_Config+0xcc>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	4a27      	ldr	r2, [pc, #156]	@ (8001470 <SystemClock_Config+0xcc>)
 80013d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d8:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <SystemClock_Config+0xcc>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <SystemClock_Config+0xd0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a21      	ldr	r2, [pc, #132]	@ (8001474 <SystemClock_Config+0xd0>)
 80013ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <SystemClock_Config+0xd0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001404:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001414:	2319      	movs	r3, #25
 8001416:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001418:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800141c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800141e:	2306      	movs	r3, #6
 8001420:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001422:	2308      	movs	r3, #8
 8001424:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fbba 	bl	8002ba4 <HAL_RCC_OscConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001436:	f000 f81f 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143a:	230f      	movs	r3, #15
 800143c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143e:	2302      	movs	r3, #2
 8001440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001446:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800144c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001450:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	2102      	movs	r1, #2
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fe1b 	bl	8003094 <HAL_RCC_ClockConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001464:	f000 f808 	bl	8001478 <Error_Handler>
  }
}
 8001468:	bf00      	nop
 800146a:	3750      	adds	r7, #80	@ 0x50
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	40007000 	.word	0x40007000

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <HAL_MspInit+0x58>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <HAL_MspInit+0x58>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001498:	6453      	str	r3, [r2, #68]	@ 0x44
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <HAL_MspInit+0x58>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <HAL_MspInit+0x58>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a0b      	ldr	r2, [pc, #44]	@ (80014dc <HAL_MspInit+0x58>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_MspInit+0x58>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2005      	movs	r0, #5
 80014c8:	f001 f8d3 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014cc:	2005      	movs	r0, #5
 80014ce:	f001 f8ec 	bl	80026aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <NMI_Handler+0x4>

080014e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <MemManage_Handler+0x4>

080014f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <UsageFault_Handler+0x4>

08001508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001536:	f000 f943 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}

0800153e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <CAN1_RX0_IRQHandler+0x10>)
 8001552:	f000 fd8d 	bl	8002070 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000028 	.word	0x20000028

08001560 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <CAN1_SCE_IRQHandler+0x10>)
 8001566:	f000 fd83 	bl	8002070 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000028 	.word	0x20000028

08001574 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <USART3_IRQHandler+0x10>)
 800157a:	f002 f847 	bl	800360c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000007c 	.word	0x2000007c

08001588 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800158c:	4802      	ldr	r0, [pc, #8]	@ (8001598 <CAN2_RX1_IRQHandler+0x10>)
 800158e:	f000 fd6f 	bl	8002070 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000050 	.word	0x20000050

0800159c <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <CAN2_SCE_IRQHandler+0x10>)
 80015a2:	f000 fd65 	bl	8002070 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000050 	.word	0x20000050

080015b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <SystemInit+0x20>)
 80015b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ba:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <SystemInit+0x20>)
 80015bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <MX_USART3_UART_Init+0x50>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 800160c:	f001 ff22 	bl	8003454 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001616:	f7ff ff2f 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000007c 	.word	0x2000007c
 8001624:	40004800 	.word	0x40004800

08001628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1d      	ldr	r2, [pc, #116]	@ (80016bc <HAL_UART_MspInit+0x94>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d134      	bne.n	80016b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <HAL_UART_MspInit+0x98>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	4a1b      	ldr	r2, [pc, #108]	@ (80016c0 <HAL_UART_MspInit+0x98>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001658:	6413      	str	r3, [r2, #64]	@ 0x40
 800165a:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <HAL_UART_MspInit+0x98>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_UART_MspInit+0x98>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <HAL_UART_MspInit+0x98>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_UART_MspInit+0x98>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001682:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001694:	2307      	movs	r3, #7
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4809      	ldr	r0, [pc, #36]	@ (80016c4 <HAL_UART_MspInit+0x9c>)
 80016a0:	f001 f8b0 	bl	8002804 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2027      	movs	r0, #39	@ 0x27
 80016aa:	f000 ffe2 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016ae:	2027      	movs	r0, #39	@ 0x27
 80016b0:	f000 fffb 	bl	80026aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	@ 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40004800 	.word	0x40004800
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020c00 	.word	0x40020c00

080016c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001700 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016cc:	f7ff ff70 	bl	80015b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016d2:	490d      	ldr	r1, [pc, #52]	@ (8001708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f6:	f002 feb7 	bl	8004468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fa:	f7ff fe31 	bl	8001360 <main>
  bx  lr    
 80016fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800170c:	08004518 	.word	0x08004518
  ldr r2, =_sbss
 8001710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001714:	200000c8 	.word	0x200000c8

08001718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC_IRQHandler>
	...

0800171c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001720:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_Init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <HAL_Init+0x40>)
 8001726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_Init+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <HAL_Init+0x40>)
 8001732:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001736:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001738:	4b08      	ldr	r3, [pc, #32]	@ (800175c <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a07      	ldr	r2, [pc, #28]	@ (800175c <HAL_Init+0x40>)
 800173e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001744:	2003      	movs	r0, #3
 8001746:	f000 ff89 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174a:	200f      	movs	r0, #15
 800174c:	f000 f808 	bl	8001760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001750:	f7ff fe98 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023c00 	.word	0x40023c00

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_InitTick+0x54>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_InitTick+0x58>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	fbb3 f3f1 	udiv	r3, r3, r1
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 ffa1 	bl	80026c6 <HAL_SYSTICK_Config>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e00e      	b.n	80017ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d80a      	bhi.n	80017aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 ff69 	bl	8002672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a0:	4a06      	ldr	r2, [pc, #24]	@ (80017bc <HAL_InitTick+0x5c>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000008 	.word	0x20000008
 80017e4:	200000c4 	.word	0x200000c4

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200000c4 	.word	0x200000c4

08001800 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0ed      	b.n	80019ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fa8e 	bl	8000d40 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001834:	f7ff ffd8 	bl	80017e8 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800183a:	e012      	b.n	8001862 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800183c:	f7ff ffd4 	bl	80017e8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b0a      	cmp	r3, #10
 8001848:	d90b      	bls.n	8001862 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2205      	movs	r2, #5
 800185a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0c5      	b.n	80019ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0e5      	beq.n	800183c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0202 	bic.w	r2, r2, #2
 800187e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001880:	f7ff ffb2 	bl	80017e8 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001886:	e012      	b.n	80018ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001888:	f7ff ffae 	bl	80017e8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b0a      	cmp	r3, #10
 8001894:	d90b      	bls.n	80018ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2205      	movs	r2, #5
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e09f      	b.n	80019ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1e5      	bne.n	8001888 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7e1b      	ldrb	r3, [r3, #24]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d108      	bne.n	80018d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e007      	b.n	80018e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7e5b      	ldrb	r3, [r3, #25]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d108      	bne.n	8001900 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e007      	b.n	8001910 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800190e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e9b      	ldrb	r3, [r3, #26]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d108      	bne.n	800192a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0220 	orr.w	r2, r2, #32
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e007      	b.n	800193a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0220 	bic.w	r2, r2, #32
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7edb      	ldrb	r3, [r3, #27]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d108      	bne.n	8001954 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0210 	bic.w	r2, r2, #16
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e007      	b.n	8001964 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0210 	orr.w	r2, r2, #16
 8001962:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7f1b      	ldrb	r3, [r3, #28]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d108      	bne.n	800197e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0208 	orr.w	r2, r2, #8
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e007      	b.n	800198e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0208 	bic.w	r2, r2, #8
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7f5b      	ldrb	r3, [r3, #29]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d108      	bne.n	80019a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0204 	orr.w	r2, r2, #4
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e007      	b.n	80019b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0204 	bic.w	r2, r2, #4
 80019b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	ea42 0103 	orr.w	r1, r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	1e5a      	subs	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a10:	7cfb      	ldrb	r3, [r7, #19]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d003      	beq.n	8001a1e <HAL_CAN_ConfigFilter+0x26>
 8001a16:	7cfb      	ldrb	r3, [r7, #19]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	f040 80be 	bne.w	8001b9a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a1e:	4b65      	ldr	r3, [pc, #404]	@ (8001bb4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001a20:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a38:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2201      	movs	r2, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	401a      	ands	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d123      	bne.n	8001ac8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001aa2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3248      	adds	r2, #72	@ 0x48
 8001aa8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001abc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001abe:	6979      	ldr	r1, [r7, #20]
 8001ac0:	3348      	adds	r3, #72	@ 0x48
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d122      	bne.n	8001b16 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001af0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3248      	adds	r2, #72	@ 0x48
 8001af6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b0c:	6979      	ldr	r1, [r7, #20]
 8001b0e:	3348      	adds	r3, #72	@ 0x48
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	440b      	add	r3, r1
 8001b14:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	401a      	ands	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001b30:	e007      	b.n	8001b42 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	401a      	ands	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001b5c:	e007      	b.n	8001b6e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b8c:	f023 0201 	bic.w	r2, r3, #1
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e006      	b.n	8001ba8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
  }
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40006400 	.word	0x40006400

08001bb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d12e      	bne.n	8001c2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001be4:	f7ff fe00 	bl	80017e8 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bea:	e012      	b.n	8001c12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bec:	f7ff fdfc 	bl	80017e8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b0a      	cmp	r3, #10
 8001bf8:	d90b      	bls.n	8001c12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2205      	movs	r2, #5
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e012      	b.n	8001c38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e5      	bne.n	8001bec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e006      	b.n	8001c38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
  }
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	@ 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c5e:	7ffb      	ldrb	r3, [r7, #31]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d003      	beq.n	8001c6c <HAL_CAN_AddTxMessage+0x2c>
 8001c64:	7ffb      	ldrb	r3, [r7, #31]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	f040 80ad 	bne.w	8001dc6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8095 	beq.w	8001db6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	0e1b      	lsrs	r3, r3, #24
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c96:	2201      	movs	r2, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cb2:	68f9      	ldr	r1, [r7, #12]
 8001cb4:	6809      	ldr	r1, [r1, #0]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3318      	adds	r3, #24
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	440b      	add	r3, r1
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e00f      	b.n	8001ce4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cd8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3318      	adds	r3, #24
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	440b      	add	r3, r1
 8001ce2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3318      	adds	r3, #24
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	7d1b      	ldrb	r3, [r3, #20]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d111      	bne.n	8001d24 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3318      	adds	r3, #24
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	6811      	ldr	r1, [r2, #0]
 8001d14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3318      	adds	r3, #24
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	440b      	add	r3, r1
 8001d20:	3304      	adds	r3, #4
 8001d22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3307      	adds	r3, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	061a      	lsls	r2, r3, #24
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3306      	adds	r3, #6
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3305      	adds	r3, #5
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	3204      	adds	r2, #4
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	4610      	mov	r0, r2
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	6811      	ldr	r1, [r2, #0]
 8001d4c:	ea43 0200 	orr.w	r2, r3, r0
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	440b      	add	r3, r1
 8001d56:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001d5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3303      	adds	r3, #3
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	061a      	lsls	r2, r3, #24
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3302      	adds	r3, #2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	041b      	lsls	r3, r3, #16
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3301      	adds	r3, #1
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	4313      	orrs	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	6811      	ldr	r1, [r2, #0]
 8001d82:	ea43 0200 	orr.w	r2, r3, r0
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001d90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3318      	adds	r3, #24
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	4413      	add	r3, r2
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	6811      	ldr	r1, [r2, #0]
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3318      	adds	r3, #24
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	440b      	add	r3, r1
 8001db0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e00e      	b.n	8001dd4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e006      	b.n	8001dd4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
  }
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3724      	adds	r7, #36	@ 0x24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d003      	beq.n	8001e04 <HAL_CAN_GetRxMessage+0x24>
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	f040 8103 	bne.w	800200a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10e      	bne.n	8001e28 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d116      	bne.n	8001e46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0f7      	b.n	8002018 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d107      	bne.n	8001e46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0e8      	b.n	8002018 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	331b      	adds	r3, #27
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	4413      	add	r3, r2
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0204 	and.w	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10c      	bne.n	8001e7e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	331b      	adds	r3, #27
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	0d5b      	lsrs	r3, r3, #21
 8001e74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e00b      	b.n	8001e96 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	331b      	adds	r3, #27
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4413      	add	r3, r2
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	331b      	adds	r3, #27
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0202 	and.w	r2, r3, #2
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	331b      	adds	r3, #27
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3304      	adds	r3, #4
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	611a      	str	r2, [r3, #16]
 8001eca:	e00b      	b.n	8001ee4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	331b      	adds	r3, #27
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3304      	adds	r3, #4
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 020f 	and.w	r2, r3, #15
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	331b      	adds	r3, #27
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	331b      	adds	r3, #27
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	4413      	add	r3, r2
 8001f08:	3304      	adds	r3, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0a1a      	lsrs	r2, r3, #8
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0c1a      	lsrs	r2, r3, #16
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3302      	adds	r3, #2
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0e1a      	lsrs	r2, r3, #24
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	3303      	adds	r3, #3
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0a1a      	lsrs	r2, r3, #8
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	3305      	adds	r3, #5
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0c1a      	lsrs	r2, r3, #16
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	3306      	adds	r3, #6
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0e1a      	lsrs	r2, r3, #24
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	3307      	adds	r3, #7
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d108      	bne.n	8001ff6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0220 	orr.w	r2, r2, #32
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	e007      	b.n	8002006 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e006      	b.n	8002018 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002034:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d002      	beq.n	8002042 <HAL_CAN_ActivateNotification+0x1e>
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d109      	bne.n	8002056 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6959      	ldr	r1, [r3, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e006      	b.n	8002064 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d07c      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d023      	beq.n	8002108 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f983 	bl	80023de <HAL_CAN_TxMailbox0CompleteCallback>
 80020d8:	e016      	b.n	8002108 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ec:	e00c      	b.n	8002108 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002100:	e002      	b.n	8002108 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f989 	bl	800241a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d024      	beq.n	800215c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800211a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f963 	bl	80023f2 <HAL_CAN_TxMailbox1CompleteCallback>
 800212c:	e016      	b.n	800215c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002140:	e00c      	b.n	800215c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002148:	2b00      	cmp	r3, #0
 800214a:	d004      	beq.n	8002156 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
 8002154:	e002      	b.n	800215c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f969 	bl	800242e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d024      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800216e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f943 	bl	8002406 <HAL_CAN_TxMailbox2CompleteCallback>
 8002180:	e016      	b.n	80021b0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
 8002194:	e00c      	b.n	80021b0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a8:	e002      	b.n	80021b0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f949 	bl	8002442 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00c      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2210      	movs	r2, #16
 80021d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d006      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2208      	movs	r2, #8
 80021ee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f930 	bl	8002456 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d009      	beq.n	8002214 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff f844 	bl	800129c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00c      	beq.n	8002238 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2210      	movs	r2, #16
 8002236:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2208      	movs	r2, #8
 8002252:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f908 	bl	800246a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff f84e 	bl	8001314 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2210      	movs	r2, #16
 8002292:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f8f2 	bl	800247e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00b      	beq.n	80022bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2208      	movs	r2, #8
 80022b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8eb 	bl	8002492 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d07b      	beq.n	80023be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d072      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800232a:	2b00      	cmp	r3, #0
 800232c:	d043      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002334:	2b00      	cmp	r3, #0
 8002336:	d03e      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800233e:	2b60      	cmp	r3, #96	@ 0x60
 8002340:	d02b      	beq.n	800239a <HAL_CAN_IRQHandler+0x32a>
 8002342:	2b60      	cmp	r3, #96	@ 0x60
 8002344:	d82e      	bhi.n	80023a4 <HAL_CAN_IRQHandler+0x334>
 8002346:	2b50      	cmp	r3, #80	@ 0x50
 8002348:	d022      	beq.n	8002390 <HAL_CAN_IRQHandler+0x320>
 800234a:	2b50      	cmp	r3, #80	@ 0x50
 800234c:	d82a      	bhi.n	80023a4 <HAL_CAN_IRQHandler+0x334>
 800234e:	2b40      	cmp	r3, #64	@ 0x40
 8002350:	d019      	beq.n	8002386 <HAL_CAN_IRQHandler+0x316>
 8002352:	2b40      	cmp	r3, #64	@ 0x40
 8002354:	d826      	bhi.n	80023a4 <HAL_CAN_IRQHandler+0x334>
 8002356:	2b30      	cmp	r3, #48	@ 0x30
 8002358:	d010      	beq.n	800237c <HAL_CAN_IRQHandler+0x30c>
 800235a:	2b30      	cmp	r3, #48	@ 0x30
 800235c:	d822      	bhi.n	80023a4 <HAL_CAN_IRQHandler+0x334>
 800235e:	2b10      	cmp	r3, #16
 8002360:	d002      	beq.n	8002368 <HAL_CAN_IRQHandler+0x2f8>
 8002362:	2b20      	cmp	r3, #32
 8002364:	d005      	beq.n	8002372 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002366:	e01d      	b.n	80023a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	f043 0308 	orr.w	r3, r3, #8
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002370:	e019      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	f043 0310 	orr.w	r3, r3, #16
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800237a:	e014      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	f043 0320 	orr.w	r3, r3, #32
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002384:	e00f      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800238e:	e00a      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002398:	e005      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023a2:	e000      	b.n	80023a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80023a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80023b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2204      	movs	r2, #4
 80023bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f868 	bl	80024a6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	@ 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	@ (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	@ (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	db0b      	blt.n	800254a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4907      	ldr	r1, [pc, #28]	@ (8002558 <__NVIC_EnableIRQ+0x38>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2001      	movs	r0, #1
 8002542:	fa00 f202 	lsl.w	r2, r0, r2
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100

0800255c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0a      	blt.n	8002586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	490c      	ldr	r1, [pc, #48]	@ (80025a8 <__NVIC_SetPriority+0x4c>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	440b      	add	r3, r1
 8002580:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002584:	e00a      	b.n	800259c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4908      	ldr	r1, [pc, #32]	@ (80025ac <__NVIC_SetPriority+0x50>)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3b04      	subs	r3, #4
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	440b      	add	r3, r1
 800259a:	761a      	strb	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000e100 	.word	0xe000e100
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	@ 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f1c3 0307 	rsb	r3, r3, #7
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf28      	it	cs
 80025ce:	2304      	movcs	r3, #4
 80025d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d902      	bls.n	80025e0 <NVIC_EncodePriority+0x30>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3b03      	subs	r3, #3
 80025de:	e000      	b.n	80025e2 <NVIC_EncodePriority+0x32>
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43d9      	mvns	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	4313      	orrs	r3, r2
         );
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	@ 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002628:	d301      	bcc.n	800262e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262a:	2301      	movs	r3, #1
 800262c:	e00f      	b.n	800264e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262e:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <SysTick_Config+0x40>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002636:	210f      	movs	r1, #15
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f7ff ff8e 	bl	800255c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002640:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <SysTick_Config+0x40>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002646:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <SysTick_Config+0x40>)
 8002648:	2207      	movs	r2, #7
 800264a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	e000e010 	.word	0xe000e010

0800265c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff29 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002684:	f7ff ff3e 	bl	8002504 <__NVIC_GetPriorityGrouping>
 8002688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f7ff ff8e 	bl	80025b0 <NVIC_EncodePriority>
 8002694:	4602      	mov	r2, r0
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5d 	bl	800255c <__NVIC_SetPriority>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff31 	bl	8002520 <__NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffa2 	bl	8002618 <SysTick_Config>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff f87c 	bl	80017e8 <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d008      	beq.n	8002710 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2280      	movs	r2, #128	@ 0x80
 8002702:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e052      	b.n	80027b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0216 	bic.w	r2, r2, #22
 800271e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800272e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <HAL_DMA_Abort+0x62>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0208 	bic.w	r2, r2, #8
 800274e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002760:	e013      	b.n	800278a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002762:	f7ff f841 	bl	80017e8 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b05      	cmp	r3, #5
 800276e:	d90c      	bls.n	800278a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2203      	movs	r2, #3
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e015      	b.n	80027b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e4      	bne.n	8002762 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279c:	223f      	movs	r2, #63	@ 0x3f
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d004      	beq.n	80027dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2280      	movs	r2, #128	@ 0x80
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e00c      	b.n	80027f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2205      	movs	r2, #5
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e16b      	b.n	8002af8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 815a 	bne.w	8002af2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d005      	beq.n	8002856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	2b02      	cmp	r3, #2
 8002854:	d130      	bne.n	80028b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d017      	beq.n	80028f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d123      	bne.n	8002948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80b4 	beq.w	8002af2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b60      	ldr	r3, [pc, #384]	@ (8002b10 <HAL_GPIO_Init+0x30c>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	4a5f      	ldr	r2, [pc, #380]	@ (8002b10 <HAL_GPIO_Init+0x30c>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002998:	6453      	str	r3, [r2, #68]	@ 0x44
 800299a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b10 <HAL_GPIO_Init+0x30c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b14 <HAL_GPIO_Init+0x310>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a52      	ldr	r2, [pc, #328]	@ (8002b18 <HAL_GPIO_Init+0x314>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d02b      	beq.n	8002a2a <HAL_GPIO_Init+0x226>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a51      	ldr	r2, [pc, #324]	@ (8002b1c <HAL_GPIO_Init+0x318>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d025      	beq.n	8002a26 <HAL_GPIO_Init+0x222>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a50      	ldr	r2, [pc, #320]	@ (8002b20 <HAL_GPIO_Init+0x31c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01f      	beq.n	8002a22 <HAL_GPIO_Init+0x21e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002b24 <HAL_GPIO_Init+0x320>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d019      	beq.n	8002a1e <HAL_GPIO_Init+0x21a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002b28 <HAL_GPIO_Init+0x324>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_GPIO_Init+0x216>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4d      	ldr	r2, [pc, #308]	@ (8002b2c <HAL_GPIO_Init+0x328>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00d      	beq.n	8002a16 <HAL_GPIO_Init+0x212>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002b30 <HAL_GPIO_Init+0x32c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <HAL_GPIO_Init+0x20e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	@ (8002b34 <HAL_GPIO_Init+0x330>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_GPIO_Init+0x20a>
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	e00e      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a0e:	2308      	movs	r3, #8
 8002a10:	e00c      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a12:	2306      	movs	r3, #6
 8002a14:	e00a      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a16:	2305      	movs	r3, #5
 8002a18:	e008      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e004      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_GPIO_Init+0x228>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	4093      	lsls	r3, r2
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a3c:	4935      	ldr	r1, [pc, #212]	@ (8002b14 <HAL_GPIO_Init+0x310>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6e:	4a32      	ldr	r2, [pc, #200]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a74:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a98:	4a27      	ldr	r2, [pc, #156]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9e:	4b26      	ldr	r3, [pc, #152]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aec:	4a12      	ldr	r2, [pc, #72]	@ (8002b38 <HAL_GPIO_Init+0x334>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	f67f ae90 	bls.w	8002820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40013800 	.word	0x40013800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40021400 	.word	0x40021400
 8002b30:	40021800 	.word	0x40021800
 8002b34:	40021c00 	.word	0x40021c00
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b58:	e003      	b.n	8002b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	619a      	str	r2, [r3, #24]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b80:	887a      	ldrh	r2, [r7, #2]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4013      	ands	r3, r2
 8002b86:	041a      	lsls	r2, r3, #16
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	43d9      	mvns	r1, r3
 8002b8c:	887b      	ldrh	r3, [r7, #2]
 8002b8e:	400b      	ands	r3, r1
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e267      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d075      	beq.n	8002cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bc2:	4b88      	ldr	r3, [pc, #544]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d00c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bce:	4b85      	ldr	r3, [pc, #532]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d112      	bne.n	8002c00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bda:	4b82      	ldr	r3, [pc, #520]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be6:	d10b      	bne.n	8002c00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	4b7e      	ldr	r3, [pc, #504]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d05b      	beq.n	8002cac <HAL_RCC_OscConfig+0x108>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d157      	bne.n	8002cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e242      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c08:	d106      	bne.n	8002c18 <HAL_RCC_OscConfig+0x74>
 8002c0a:	4b76      	ldr	r3, [pc, #472]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a75      	ldr	r2, [pc, #468]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e01d      	b.n	8002c54 <HAL_RCC_OscConfig+0xb0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x98>
 8002c22:	4b70      	ldr	r3, [pc, #448]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6f      	ldr	r2, [pc, #444]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6c      	ldr	r2, [pc, #432]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e00b      	b.n	8002c54 <HAL_RCC_OscConfig+0xb0>
 8002c3c:	4b69      	ldr	r3, [pc, #420]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a68      	ldr	r2, [pc, #416]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b66      	ldr	r3, [pc, #408]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a65      	ldr	r2, [pc, #404]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d013      	beq.n	8002c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fdc4 	bl	80017e8 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c64:	f7fe fdc0 	bl	80017e8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	@ 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e207      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	4b5b      	ldr	r3, [pc, #364]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0xc0>
 8002c82:	e014      	b.n	8002cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fe fdb0 	bl	80017e8 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7fe fdac 	bl	80017e8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	@ 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1f3      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9e:	4b51      	ldr	r3, [pc, #324]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0xe8>
 8002caa:	e000      	b.n	8002cae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d063      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cba:	4b4a      	ldr	r3, [pc, #296]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc6:	4b47      	ldr	r3, [pc, #284]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d11c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b44      	ldr	r3, [pc, #272]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d116      	bne.n	8002d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	4b41      	ldr	r3, [pc, #260]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x152>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e1c7      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4937      	ldr	r1, [pc, #220]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	e03a      	b.n	8002d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d14:	4b34      	ldr	r3, [pc, #208]	@ (8002de8 <HAL_RCC_OscConfig+0x244>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fd65 	bl	80017e8 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d22:	f7fe fd61 	bl	80017e8 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e1a8      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	4b28      	ldr	r3, [pc, #160]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4925      	ldr	r1, [pc, #148]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d56:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <HAL_RCC_OscConfig+0x244>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fd44 	bl	80017e8 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d64:	f7fe fd40 	bl	80017e8 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e187      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	4b1b      	ldr	r3, [pc, #108]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d036      	beq.n	8002dfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d96:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <HAL_RCC_OscConfig+0x248>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fd24 	bl	80017e8 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da4:	f7fe fd20 	bl	80017e8 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e167      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <HAL_RCC_OscConfig+0x240>)
 8002db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x200>
 8002dc2:	e01b      	b.n	8002dfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <HAL_RCC_OscConfig+0x248>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dca:	f7fe fd0d 	bl	80017e8 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd0:	e00e      	b.n	8002df0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fd09 	bl	80017e8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d907      	bls.n	8002df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e150      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
 8002de4:	40023800 	.word	0x40023800
 8002de8:	42470000 	.word	0x42470000
 8002dec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df0:	4b88      	ldr	r3, [pc, #544]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ea      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8097 	beq.w	8002f38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0e:	4b81      	ldr	r3, [pc, #516]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	4a7c      	ldr	r2, [pc, #496]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b77      	ldr	r3, [pc, #476]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e46:	4b74      	ldr	r3, [pc, #464]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a73      	ldr	r2, [pc, #460]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7fe fcc9 	bl	80017e8 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe fcc5 	bl	80017e8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e10c      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003018 <HAL_RCC_OscConfig+0x474>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x2ea>
 8002e80:	4b64      	ldr	r3, [pc, #400]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e84:	4a63      	ldr	r2, [pc, #396]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e8c:	e01c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x324>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x30c>
 8002e96:	4b5f      	ldr	r3, [pc, #380]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x324>
 8002eb0:	4b58      	ldr	r3, [pc, #352]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb4:	4a57      	ldr	r2, [pc, #348]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ebc:	4b55      	ldr	r3, [pc, #340]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a54      	ldr	r2, [pc, #336]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 0304 	bic.w	r3, r3, #4
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fc8a 	bl	80017e8 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fc86 	bl	80017e8 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0cb      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eee:	4b49      	ldr	r3, [pc, #292]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0ee      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x334>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fe fc74 	bl	80017e8 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fe fc70 	bl	80017e8 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0b5      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ee      	bne.n	8002f04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2c:	4b39      	ldr	r3, [pc, #228]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	4a38      	ldr	r2, [pc, #224]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a1 	beq.w	8003084 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f42:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d05c      	beq.n	8003008 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d141      	bne.n	8002fda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b31      	ldr	r3, [pc, #196]	@ (800301c <HAL_RCC_OscConfig+0x478>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fc44 	bl	80017e8 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe fc40 	bl	80017e8 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e087      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	4b27      	ldr	r3, [pc, #156]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	491b      	ldr	r1, [pc, #108]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fac:	4b1b      	ldr	r3, [pc, #108]	@ (800301c <HAL_RCC_OscConfig+0x478>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fc19 	bl	80017e8 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fe fc15 	bl	80017e8 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e05c      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x416>
 8002fd8:	e054      	b.n	8003084 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <HAL_RCC_OscConfig+0x478>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fc02 	bl	80017e8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fe fbfe 	bl	80017e8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e045      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x444>
 8003006:	e03d      	b.n	8003084 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d107      	bne.n	8003020 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e038      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000
 800301c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x4ec>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d028      	beq.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d121      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d11a      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003058:	4293      	cmp	r3, r2
 800305a:	d111      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	3b01      	subs	r3, #1
 800306a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d107      	bne.n	8003080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800

08003094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0cc      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a8:	4b68      	ldr	r3, [pc, #416]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d90c      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b65      	ldr	r3, [pc, #404]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a58      	ldr	r2, [pc, #352]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a52      	ldr	r2, [pc, #328]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800310a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d044      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d119      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d003      	beq.n	8003152 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	2b03      	cmp	r3, #3
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003152:	4b3f      	ldr	r3, [pc, #252]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003162:	4b3b      	ldr	r3, [pc, #236]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e067      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003172:	4b37      	ldr	r3, [pc, #220]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f023 0203 	bic.w	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4934      	ldr	r1, [pc, #208]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003184:	f7fe fb30 	bl	80017e8 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318c:	f7fe fb2c 	bl	80017e8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e04f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 020c 	and.w	r2, r3, #12
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d1eb      	bne.n	800318c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b4:	4b25      	ldr	r3, [pc, #148]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d20c      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b22      	ldr	r3, [pc, #136]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	@ (800324c <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003206:	4b12      	ldr	r3, [pc, #72]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f821 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800321e:	4602      	mov	r2, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490a      	ldr	r1, [pc, #40]	@ (8003254 <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	@ (8003258 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	@ (800325c <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fa90 	bl	8001760 <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023c00 	.word	0x40023c00
 8003250:	40023800 	.word	0x40023800
 8003254:	080044f0 	.word	0x080044f0
 8003258:	20000000 	.word	0x20000000
 800325c:	20000004 	.word	0x20000004

08003260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003264:	b090      	sub	sp, #64	@ 0x40
 8003266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003278:	4b59      	ldr	r3, [pc, #356]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b08      	cmp	r3, #8
 8003282:	d00d      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003284:	2b08      	cmp	r3, #8
 8003286:	f200 80a1 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x16c>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x34>
 800328e:	2b04      	cmp	r3, #4
 8003290:	d003      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x3a>
 8003292:	e09b      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b53      	ldr	r3, [pc, #332]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003296:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003298:	e09b      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329a:	4b53      	ldr	r3, [pc, #332]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800329c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800329e:	e098      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a0:	4b4f      	ldr	r3, [pc, #316]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032aa:	4b4d      	ldr	r3, [pc, #308]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d028      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b4a      	ldr	r3, [pc, #296]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	2200      	movs	r2, #0
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032c8:	2100      	movs	r1, #0
 80032ca:	4b47      	ldr	r3, [pc, #284]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032cc:	fb03 f201 	mul.w	r2, r3, r1
 80032d0:	2300      	movs	r3, #0
 80032d2:	fb00 f303 	mul.w	r3, r0, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	4a43      	ldr	r2, [pc, #268]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032da:	fba0 1202 	umull	r1, r2, r0, r2
 80032de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032e0:	460a      	mov	r2, r1
 80032e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032e6:	4413      	add	r3, r2
 80032e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ec:	2200      	movs	r2, #0
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	61fa      	str	r2, [r7, #28]
 80032f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032fa:	f7fd fa53 	bl	80007a4 <__aeabi_uldivmod>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4613      	mov	r3, r2
 8003304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003306:	e053      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003308:	4b35      	ldr	r3, [pc, #212]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	2200      	movs	r2, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	617a      	str	r2, [r7, #20]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800331a:	f04f 0b00 	mov.w	fp, #0
 800331e:	4652      	mov	r2, sl
 8003320:	465b      	mov	r3, fp
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f04f 0100 	mov.w	r1, #0
 800332a:	0159      	lsls	r1, r3, #5
 800332c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003330:	0150      	lsls	r0, r2, #5
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	ebb2 080a 	subs.w	r8, r2, sl
 800333a:	eb63 090b 	sbc.w	r9, r3, fp
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800334a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800334e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003352:	ebb2 0408 	subs.w	r4, r2, r8
 8003356:	eb63 0509 	sbc.w	r5, r3, r9
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	00eb      	lsls	r3, r5, #3
 8003364:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003368:	00e2      	lsls	r2, r4, #3
 800336a:	4614      	mov	r4, r2
 800336c:	461d      	mov	r5, r3
 800336e:	eb14 030a 	adds.w	r3, r4, sl
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	eb45 030b 	adc.w	r3, r5, fp
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003386:	4629      	mov	r1, r5
 8003388:	028b      	lsls	r3, r1, #10
 800338a:	4621      	mov	r1, r4
 800338c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003390:	4621      	mov	r1, r4
 8003392:	028a      	lsls	r2, r1, #10
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339a:	2200      	movs	r2, #0
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	60fa      	str	r2, [r7, #12]
 80033a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a4:	f7fd f9fe 	bl	80007a4 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80033ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3740      	adds	r7, #64	@ 0x40
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00f42400 	.word	0x00f42400
 80033e8:	017d7840 	.word	0x017d7840

080033ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f0:	4b03      	ldr	r3, [pc, #12]	@ (8003400 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000000 	.word	0x20000000

08003404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003408:	f7ff fff0 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	0a9b      	lsrs	r3, r3, #10
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	@ (8003428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	08004500 	.word	0x08004500

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003430:	f7ff ffdc 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0b5b      	lsrs	r3, r3, #13
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	@ (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	08004500 	.word	0x08004500

08003454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e042      	b.n	80034ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fe f8d4 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2224      	movs	r2, #36	@ 0x24
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fd69 	bl	8003f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b20      	cmp	r3, #32
 8003512:	d175      	bne.n	8003600 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_UART_Transmit+0x2c>
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e06e      	b.n	8003602 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2221      	movs	r2, #33	@ 0x21
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003532:	f7fe f959 	bl	80017e8 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354c:	d108      	bne.n	8003560 <HAL_UART_Transmit+0x6c>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e003      	b.n	8003568 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003568:	e02e      	b.n	80035c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	2180      	movs	r1, #128	@ 0x80
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fb05 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e03a      	b.n	8003602 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10b      	bne.n	80035aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	3302      	adds	r3, #2
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	e007      	b.n	80035ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	3301      	adds	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1cb      	bne.n	800356a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	2140      	movs	r1, #64	@ 0x40
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fad1 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e006      	b.n	8003602 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b0ba      	sub	sp, #232	@ 0xe8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800364a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10f      	bne.n	8003672 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_UART_IRQHandler+0x66>
 800365e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fbc2 	bl	8003df4 <UART_Receive_IT>
      return;
 8003670:	e25b      	b.n	8003b2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80de 	beq.w	8003838 <HAL_UART_IRQHandler+0x22c>
 800367c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d106      	bne.n	8003696 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800368c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80d1 	beq.w	8003838 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_UART_IRQHandler+0xae>
 80036a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_UART_IRQHandler+0xd2>
 80036c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f043 0202 	orr.w	r2, r3, #2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_UART_IRQHandler+0xf6>
 80036ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	f043 0204 	orr.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d011      	beq.n	8003732 <HAL_UART_IRQHandler+0x126>
 800370e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d105      	bne.n	8003726 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800371a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	f043 0208 	orr.w	r2, r3, #8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 81f2 	beq.w	8003b20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800373c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_UART_IRQHandler+0x14e>
 8003748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fb4d 	bl	8003df4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003764:	2b40      	cmp	r3, #64	@ 0x40
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <HAL_UART_IRQHandler+0x17a>
 800377e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d04f      	beq.n	8003826 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa55 	bl	8003c36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003796:	2b40      	cmp	r3, #64	@ 0x40
 8003798:	d141      	bne.n	800381e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3314      	adds	r3, #20
 80037a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1d9      	bne.n	800379a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d013      	beq.n	8003816 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f2:	4a7e      	ldr	r2, [pc, #504]	@ (80039ec <HAL_UART_IRQHandler+0x3e0>)
 80037f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe ffdf 	bl	80027be <HAL_DMA_Abort_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003810:	4610      	mov	r0, r2
 8003812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	e00e      	b.n	8003834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f99e 	bl	8003b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	e00a      	b.n	8003834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f99a 	bl	8003b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	e006      	b.n	8003834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f996 	bl	8003b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003832:	e175      	b.n	8003b20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	bf00      	nop
    return;
 8003836:	e173      	b.n	8003b20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 814f 	bne.w	8003ae0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8148 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8141 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387e:	2b40      	cmp	r3, #64	@ 0x40
 8003880:	f040 80b6 	bne.w	80039f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003890:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8145 	beq.w	8003b24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800389e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038a2:	429a      	cmp	r2, r3
 80038a4:	f080 813e 	bcs.w	8003b24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ba:	f000 8088 	beq.w	80039ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	330c      	adds	r3, #12
 80038c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	330c      	adds	r3, #12
 80038e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1d9      	bne.n	80038be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3314      	adds	r3, #20
 8003910:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800391a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3314      	adds	r3, #20
 800392a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800392e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003932:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003936:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e1      	bne.n	800390a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3314      	adds	r3, #20
 800394c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800395c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3314      	adds	r3, #20
 8003966:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800396a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800396c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003970:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e3      	bne.n	8003946 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800399c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800399e:	f023 0310 	bic.w	r3, r3, #16
 80039a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e3      	bne.n	800398c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe fe88 	bl	80026de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039dc:	b29b      	uxth	r3, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8c1 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039ea:	e09b      	b.n	8003b24 <HAL_UART_IRQHandler+0x518>
 80039ec:	08003cfd 	.word	0x08003cfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 808e 	beq.w	8003b28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8089 	beq.w	8003b28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3314      	adds	r3, #20
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a72:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e3      	bne.n	8003a4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0310 	bic.w	r3, r3, #16
 8003aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ab8:	61fa      	str	r2, [r7, #28]
 8003aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e3      	bne.n	8003a94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ad2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f847 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ade:	e023      	b.n	8003b28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <HAL_UART_IRQHandler+0x4f4>
 8003aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f913 	bl	8003d24 <UART_Transmit_IT>
    return;
 8003afe:	e014      	b.n	8003b2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00e      	beq.n	8003b2a <HAL_UART_IRQHandler+0x51e>
 8003b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f953 	bl	8003dc4 <UART_EndTransmit_IT>
    return;
 8003b1e:	e004      	b.n	8003b2a <HAL_UART_IRQHandler+0x51e>
    return;
 8003b20:	bf00      	nop
 8003b22:	e002      	b.n	8003b2a <HAL_UART_IRQHandler+0x51e>
      return;
 8003b24:	bf00      	nop
 8003b26:	e000      	b.n	8003b2a <HAL_UART_IRQHandler+0x51e>
      return;
 8003b28:	bf00      	nop
  }
}
 8003b2a:	37e8      	adds	r7, #232	@ 0xe8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	4613      	mov	r3, r2
 8003b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b94:	e03b      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d037      	beq.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fd fe23 	bl	80017e8 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e03a      	b.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d023      	beq.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b80      	cmp	r3, #128	@ 0x80
 8003bca:	d020      	beq.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b40      	cmp	r3, #64	@ 0x40
 8003bd0:	d01d      	beq.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d116      	bne.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f81d 	bl	8003c36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2208      	movs	r2, #8
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00f      	b.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2301      	moveq	r3, #1
 8003c20:	2300      	movne	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d0b4      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b095      	sub	sp, #84	@ 0x54
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e5      	bne.n	8003c3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3314      	adds	r3, #20
 8003c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3314      	adds	r3, #20
 8003c90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e5      	bne.n	8003c72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d119      	bne.n	8003ce2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f023 0310 	bic.w	r3, r3, #16
 8003cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cce:	61ba      	str	r2, [r7, #24]
 8003cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6979      	ldr	r1, [r7, #20]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	613b      	str	r3, [r7, #16]
   return(result);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cf0:	bf00      	nop
 8003cf2:	3754      	adds	r7, #84	@ 0x54
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7ff ff1e 	bl	8003b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b21      	cmp	r3, #33	@ 0x21
 8003d36:	d13e      	bne.n	8003db6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d40:	d114      	bne.n	8003d6c <UART_Transmit_IT+0x48>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d110      	bne.n	8003d6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	1c9a      	adds	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	621a      	str	r2, [r3, #32]
 8003d6a:	e008      	b.n	8003d7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	1c59      	adds	r1, r3, #1
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6211      	str	r1, [r2, #32]
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10f      	bne.n	8003db2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003da0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003db0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e000      	b.n	8003db8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fea3 	bl	8003b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08c      	sub	sp, #48	@ 0x30
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b22      	cmp	r3, #34	@ 0x22
 8003e06:	f040 80ae 	bne.w	8003f66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e12:	d117      	bne.n	8003e44 <UART_Receive_IT+0x50>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d113      	bne.n	8003e44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e42:	e026      	b.n	8003e92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e56:	d007      	beq.n	8003e68 <UART_Receive_IT+0x74>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <UART_Receive_IT+0x82>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	e008      	b.n	8003e88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d15d      	bne.n	8003f62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0220 	bic.w	r2, r2, #32
 8003eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d135      	bne.n	8003f58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	613b      	str	r3, [r7, #16]
   return(result);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f12:	623a      	str	r2, [r7, #32]
 8003f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	69f9      	ldr	r1, [r7, #28]
 8003f18:	6a3a      	ldr	r2, [r7, #32]
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e5      	bne.n	8003ef2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d10a      	bne.n	8003f4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff fe0b 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
 8003f56:	e002      	b.n	8003f5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fdf3 	bl	8003b44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e002      	b.n	8003f68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3730      	adds	r7, #48	@ 0x30
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f74:	b0c0      	sub	sp, #256	@ 0x100
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	68d9      	ldr	r1, [r3, #12]
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	ea40 0301 	orr.w	r3, r0, r1
 8003f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fc8:	f021 010c 	bic.w	r1, r1, #12
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fea:	6999      	ldr	r1, [r3, #24]
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	ea40 0301 	orr.w	r3, r0, r1
 8003ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b8f      	ldr	r3, [pc, #572]	@ (800423c <UART_SetConfig+0x2cc>)
 8004000:	429a      	cmp	r2, r3
 8004002:	d005      	beq.n	8004010 <UART_SetConfig+0xa0>
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b8d      	ldr	r3, [pc, #564]	@ (8004240 <UART_SetConfig+0x2d0>)
 800400c:	429a      	cmp	r2, r3
 800400e:	d104      	bne.n	800401a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004010:	f7ff fa0c 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8004014:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004018:	e003      	b.n	8004022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800401a:	f7ff f9f3 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 800401e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800402c:	f040 810c 	bne.w	8004248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004034:	2200      	movs	r2, #0
 8004036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800403a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800403e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004042:	4622      	mov	r2, r4
 8004044:	462b      	mov	r3, r5
 8004046:	1891      	adds	r1, r2, r2
 8004048:	65b9      	str	r1, [r7, #88]	@ 0x58
 800404a:	415b      	adcs	r3, r3
 800404c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800404e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004052:	4621      	mov	r1, r4
 8004054:	eb12 0801 	adds.w	r8, r2, r1
 8004058:	4629      	mov	r1, r5
 800405a:	eb43 0901 	adc.w	r9, r3, r1
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800406a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800406e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004072:	4690      	mov	r8, r2
 8004074:	4699      	mov	r9, r3
 8004076:	4623      	mov	r3, r4
 8004078:	eb18 0303 	adds.w	r3, r8, r3
 800407c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004080:	462b      	mov	r3, r5
 8004082:	eb49 0303 	adc.w	r3, r9, r3
 8004086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004096:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800409a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800409e:	460b      	mov	r3, r1
 80040a0:	18db      	adds	r3, r3, r3
 80040a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040a4:	4613      	mov	r3, r2
 80040a6:	eb42 0303 	adc.w	r3, r2, r3
 80040aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80040ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040b4:	f7fc fb76 	bl	80007a4 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4b61      	ldr	r3, [pc, #388]	@ (8004244 <UART_SetConfig+0x2d4>)
 80040be:	fba3 2302 	umull	r2, r3, r3, r2
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	011c      	lsls	r4, r3, #4
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040d8:	4642      	mov	r2, r8
 80040da:	464b      	mov	r3, r9
 80040dc:	1891      	adds	r1, r2, r2
 80040de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040e0:	415b      	adcs	r3, r3
 80040e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040e8:	4641      	mov	r1, r8
 80040ea:	eb12 0a01 	adds.w	sl, r2, r1
 80040ee:	4649      	mov	r1, r9
 80040f0:	eb43 0b01 	adc.w	fp, r3, r1
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004108:	4692      	mov	sl, r2
 800410a:	469b      	mov	fp, r3
 800410c:	4643      	mov	r3, r8
 800410e:	eb1a 0303 	adds.w	r3, sl, r3
 8004112:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004116:	464b      	mov	r3, r9
 8004118:	eb4b 0303 	adc.w	r3, fp, r3
 800411c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800412c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004134:	460b      	mov	r3, r1
 8004136:	18db      	adds	r3, r3, r3
 8004138:	643b      	str	r3, [r7, #64]	@ 0x40
 800413a:	4613      	mov	r3, r2
 800413c:	eb42 0303 	adc.w	r3, r2, r3
 8004140:	647b      	str	r3, [r7, #68]	@ 0x44
 8004142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800414a:	f7fc fb2b 	bl	80007a4 <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4611      	mov	r1, r2
 8004154:	4b3b      	ldr	r3, [pc, #236]	@ (8004244 <UART_SetConfig+0x2d4>)
 8004156:	fba3 2301 	umull	r2, r3, r3, r1
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2264      	movs	r2, #100	@ 0x64
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	1acb      	subs	r3, r1, r3
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800416a:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <UART_SetConfig+0x2d4>)
 800416c:	fba3 2302 	umull	r2, r3, r3, r2
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004178:	441c      	add	r4, r3
 800417a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800417e:	2200      	movs	r2, #0
 8004180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004184:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	1891      	adds	r1, r2, r2
 8004192:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004194:	415b      	adcs	r3, r3
 8004196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800419c:	4641      	mov	r1, r8
 800419e:	1851      	adds	r1, r2, r1
 80041a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80041a2:	4649      	mov	r1, r9
 80041a4:	414b      	adcs	r3, r1
 80041a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041b4:	4659      	mov	r1, fp
 80041b6:	00cb      	lsls	r3, r1, #3
 80041b8:	4651      	mov	r1, sl
 80041ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041be:	4651      	mov	r1, sl
 80041c0:	00ca      	lsls	r2, r1, #3
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	4642      	mov	r2, r8
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041d0:	464b      	mov	r3, r9
 80041d2:	460a      	mov	r2, r1
 80041d4:	eb42 0303 	adc.w	r3, r2, r3
 80041d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041f0:	460b      	mov	r3, r1
 80041f2:	18db      	adds	r3, r3, r3
 80041f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041f6:	4613      	mov	r3, r2
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004206:	f7fc facd 	bl	80007a4 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <UART_SetConfig+0x2d4>)
 8004210:	fba3 1302 	umull	r1, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	2164      	movs	r1, #100	@ 0x64
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	3332      	adds	r3, #50	@ 0x32
 8004222:	4a08      	ldr	r2, [pc, #32]	@ (8004244 <UART_SetConfig+0x2d4>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	f003 0207 	and.w	r2, r3, #7
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4422      	add	r2, r4
 8004236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004238:	e106      	b.n	8004448 <UART_SetConfig+0x4d8>
 800423a:	bf00      	nop
 800423c:	40011000 	.word	0x40011000
 8004240:	40011400 	.word	0x40011400
 8004244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800424c:	2200      	movs	r2, #0
 800424e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004252:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800425a:	4642      	mov	r2, r8
 800425c:	464b      	mov	r3, r9
 800425e:	1891      	adds	r1, r2, r2
 8004260:	6239      	str	r1, [r7, #32]
 8004262:	415b      	adcs	r3, r3
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
 8004266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800426a:	4641      	mov	r1, r8
 800426c:	1854      	adds	r4, r2, r1
 800426e:	4649      	mov	r1, r9
 8004270:	eb43 0501 	adc.w	r5, r3, r1
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	00eb      	lsls	r3, r5, #3
 800427e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004282:	00e2      	lsls	r2, r4, #3
 8004284:	4614      	mov	r4, r2
 8004286:	461d      	mov	r5, r3
 8004288:	4643      	mov	r3, r8
 800428a:	18e3      	adds	r3, r4, r3
 800428c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004290:	464b      	mov	r3, r9
 8004292:	eb45 0303 	adc.w	r3, r5, r3
 8004296:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042b6:	4629      	mov	r1, r5
 80042b8:	008b      	lsls	r3, r1, #2
 80042ba:	4621      	mov	r1, r4
 80042bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042c0:	4621      	mov	r1, r4
 80042c2:	008a      	lsls	r2, r1, #2
 80042c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042c8:	f7fc fa6c 	bl	80007a4 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4b60      	ldr	r3, [pc, #384]	@ (8004454 <UART_SetConfig+0x4e4>)
 80042d2:	fba3 2302 	umull	r2, r3, r3, r2
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	011c      	lsls	r4, r3, #4
 80042da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	1891      	adds	r1, r2, r2
 80042f2:	61b9      	str	r1, [r7, #24]
 80042f4:	415b      	adcs	r3, r3
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042fc:	4641      	mov	r1, r8
 80042fe:	1851      	adds	r1, r2, r1
 8004300:	6139      	str	r1, [r7, #16]
 8004302:	4649      	mov	r1, r9
 8004304:	414b      	adcs	r3, r1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004314:	4659      	mov	r1, fp
 8004316:	00cb      	lsls	r3, r1, #3
 8004318:	4651      	mov	r1, sl
 800431a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800431e:	4651      	mov	r1, sl
 8004320:	00ca      	lsls	r2, r1, #3
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	4603      	mov	r3, r0
 8004328:	4642      	mov	r2, r8
 800432a:	189b      	adds	r3, r3, r2
 800432c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004330:	464b      	mov	r3, r9
 8004332:	460a      	mov	r2, r1
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004346:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004354:	4649      	mov	r1, r9
 8004356:	008b      	lsls	r3, r1, #2
 8004358:	4641      	mov	r1, r8
 800435a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435e:	4641      	mov	r1, r8
 8004360:	008a      	lsls	r2, r1, #2
 8004362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004366:	f7fc fa1d 	bl	80007a4 <__aeabi_uldivmod>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4611      	mov	r1, r2
 8004370:	4b38      	ldr	r3, [pc, #224]	@ (8004454 <UART_SetConfig+0x4e4>)
 8004372:	fba3 2301 	umull	r2, r3, r3, r1
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2264      	movs	r2, #100	@ 0x64
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	1acb      	subs	r3, r1, r3
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	3332      	adds	r3, #50	@ 0x32
 8004384:	4a33      	ldr	r2, [pc, #204]	@ (8004454 <UART_SetConfig+0x4e4>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004390:	441c      	add	r4, r3
 8004392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004396:	2200      	movs	r2, #0
 8004398:	673b      	str	r3, [r7, #112]	@ 0x70
 800439a:	677a      	str	r2, [r7, #116]	@ 0x74
 800439c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043a0:	4642      	mov	r2, r8
 80043a2:	464b      	mov	r3, r9
 80043a4:	1891      	adds	r1, r2, r2
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	415b      	adcs	r3, r3
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043b0:	4641      	mov	r1, r8
 80043b2:	1851      	adds	r1, r2, r1
 80043b4:	6039      	str	r1, [r7, #0]
 80043b6:	4649      	mov	r1, r9
 80043b8:	414b      	adcs	r3, r1
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043c8:	4659      	mov	r1, fp
 80043ca:	00cb      	lsls	r3, r1, #3
 80043cc:	4651      	mov	r1, sl
 80043ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043d2:	4651      	mov	r1, sl
 80043d4:	00ca      	lsls	r2, r1, #3
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	4603      	mov	r3, r0
 80043dc:	4642      	mov	r2, r8
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043e2:	464b      	mov	r3, r9
 80043e4:	460a      	mov	r2, r1
 80043e6:	eb42 0303 	adc.w	r3, r2, r3
 80043ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80043f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004404:	4649      	mov	r1, r9
 8004406:	008b      	lsls	r3, r1, #2
 8004408:	4641      	mov	r1, r8
 800440a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440e:	4641      	mov	r1, r8
 8004410:	008a      	lsls	r2, r1, #2
 8004412:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004416:	f7fc f9c5 	bl	80007a4 <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <UART_SetConfig+0x4e4>)
 8004420:	fba3 1302 	umull	r1, r3, r3, r2
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	2164      	movs	r1, #100	@ 0x64
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	3332      	adds	r3, #50	@ 0x32
 8004432:	4a08      	ldr	r2, [pc, #32]	@ (8004454 <UART_SetConfig+0x4e4>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	f003 020f 	and.w	r2, r3, #15
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4422      	add	r2, r4
 8004446:	609a      	str	r2, [r3, #8]
}
 8004448:	bf00      	nop
 800444a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800444e:	46bd      	mov	sp, r7
 8004450:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004454:	51eb851f 	.word	0x51eb851f

08004458 <memset>:
 8004458:	4402      	add	r2, r0
 800445a:	4603      	mov	r3, r0
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	f803 1b01 	strb.w	r1, [r3], #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <__libc_init_array>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	4d0d      	ldr	r5, [pc, #52]	@ (80044a0 <__libc_init_array+0x38>)
 800446c:	4c0d      	ldr	r4, [pc, #52]	@ (80044a4 <__libc_init_array+0x3c>)
 800446e:	1b64      	subs	r4, r4, r5
 8004470:	10a4      	asrs	r4, r4, #2
 8004472:	2600      	movs	r6, #0
 8004474:	42a6      	cmp	r6, r4
 8004476:	d109      	bne.n	800448c <__libc_init_array+0x24>
 8004478:	4d0b      	ldr	r5, [pc, #44]	@ (80044a8 <__libc_init_array+0x40>)
 800447a:	4c0c      	ldr	r4, [pc, #48]	@ (80044ac <__libc_init_array+0x44>)
 800447c:	f000 f818 	bl	80044b0 <_init>
 8004480:	1b64      	subs	r4, r4, r5
 8004482:	10a4      	asrs	r4, r4, #2
 8004484:	2600      	movs	r6, #0
 8004486:	42a6      	cmp	r6, r4
 8004488:	d105      	bne.n	8004496 <__libc_init_array+0x2e>
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004490:	4798      	blx	r3
 8004492:	3601      	adds	r6, #1
 8004494:	e7ee      	b.n	8004474 <__libc_init_array+0xc>
 8004496:	f855 3b04 	ldr.w	r3, [r5], #4
 800449a:	4798      	blx	r3
 800449c:	3601      	adds	r6, #1
 800449e:	e7f2      	b.n	8004486 <__libc_init_array+0x1e>
 80044a0:	08004510 	.word	0x08004510
 80044a4:	08004510 	.word	0x08004510
 80044a8:	08004510 	.word	0x08004510
 80044ac:	08004514 	.word	0x08004514

080044b0 <_init>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr

080044bc <_fini>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr
